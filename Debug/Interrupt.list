
Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000720  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008b8  080008b8  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008b8  080008b8  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080008b8  080008b8  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080008b8  080008b8  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008b8  080008b8  000018b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080008bc  080008bc  000018bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080008c0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080008cc  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080008cc  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002393  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009e2  00000000  00000000  000043cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000348  00000000  00000000  00004db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000256  00000000  00000000  00005100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014027  00000000  00000000  00005356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000359f  00000000  00000000  0001937d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f0ae  00000000  00000000  0001c91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009b9ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b70  00000000  00000000  0009ba10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0009c580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080008a0 	.word	0x080008a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080008a0 	.word	0x080008a0

080001d8 <LedInit>:

#define GPIOA_BASE_ADDR 0x40020000
#define GPIOD_BASE_ADDR 0X40020C00

void LedInit()
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80001de:	2300      	movs	r3, #0
 80001e0:	603b      	str	r3, [r7, #0]
 80001e2:	4b10      	ldr	r3, [pc, #64]	@ (8000224 <LedInit+0x4c>)
 80001e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000224 <LedInit+0x4c>)
 80001e8:	f043 0308 	orr.w	r3, r3, #8
 80001ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80001ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000224 <LedInit+0x4c>)
 80001f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f2:	f003 0308 	and.w	r3, r3, #8
 80001f6:	603b      	str	r3, [r7, #0]
 80001f8:	683b      	ldr	r3, [r7, #0]
	uint32_t* GPIOD_MODER= (uint32_t*)(GPIOD_BASE_ADDR + 0x00);
 80001fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000228 <LedInit+0x50>)
 80001fc:	607b      	str	r3, [r7, #4]
	*GPIOD_MODER &= ~(0xff << 24);
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= (0b01 << 24)| (0b01 << 26)|(0b01 << 28)|(0b01 << 30);
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f043 42aa 	orr.w	r2, r3, #1426063360	@ 0x55000000
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	601a      	str	r2, [r3, #0]
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	40023800 	.word	0x40023800
 8000228:	40020c00 	.word	0x40020c00

0800022c <ButtonInit>:

void ButtonInit()
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000232:	2300      	movs	r3, #0
 8000234:	603b      	str	r3, [r7, #0]
 8000236:	4b0d      	ldr	r3, [pc, #52]	@ (800026c <ButtonInit+0x40>)
 8000238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800023a:	4a0c      	ldr	r2, [pc, #48]	@ (800026c <ButtonInit+0x40>)
 800023c:	f043 0301 	orr.w	r3, r3, #1
 8000240:	6313      	str	r3, [r2, #48]	@ 0x30
 8000242:	4b0a      	ldr	r3, [pc, #40]	@ (800026c <ButtonInit+0x40>)
 8000244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000246:	f003 0301 	and.w	r3, r3, #1
 800024a:	603b      	str	r3, [r7, #0]
 800024c:	683b      	ldr	r3, [r7, #0]
	uint32_t* GPIOA_MODER= (uint32_t*)(GPIOA_BASE_ADDR + 0x00);
 800024e:	4b08      	ldr	r3, [pc, #32]	@ (8000270 <ButtonInit+0x44>)
 8000250:	607b      	str	r3, [r7, #4]
	*GPIOA_MODER &= ~(0b11<<0);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f023 0203 	bic.w	r2, r3, #3
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	601a      	str	r2, [r3, #0]
}
 800025e:	bf00      	nop
 8000260:	370c      	adds	r7, #12
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	40023800 	.word	0x40023800
 8000270:	40020000 	.word	0x40020000

08000274 <LedCtrl>:
	LED_RED,
	LED_BLUE
}LED_t;

void LedCtrl(LED_t led, int on_off)
{
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	6039      	str	r1, [r7, #0]
 800027e:	71fb      	strb	r3, [r7, #7]
	else
	{
		*GPIOD_ODR &= ~(1<<led);
	}
#else
	uint32_t* GPIOD_BSRR = (uint32_t*)(GPIOD_BASE_ADDR + 0x18);
 8000280:	4b0f      	ldr	r3, [pc, #60]	@ (80002c0 <LedCtrl+0x4c>)
 8000282:	60fb      	str	r3, [r7, #12]
	if(on_off == 1)
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	2b01      	cmp	r3, #1
 8000288:	d109      	bne.n	800029e <LedCtrl+0x2a>
	{
		*GPIOD_BSRR |= (1<<led);
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	79fa      	ldrb	r2, [r7, #7]
 8000290:	2101      	movs	r1, #1
 8000292:	fa01 f202 	lsl.w	r2, r1, r2
 8000296:	431a      	orrs	r2, r3
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	601a      	str	r2, [r3, #0]
	else
	{
		*GPIOD_BSRR |= (1<<(led+16));
	}
#endif
}
 800029c:	e009      	b.n	80002b2 <LedCtrl+0x3e>
		*GPIOD_BSRR |= (1<<(led+16));
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	79fa      	ldrb	r2, [r7, #7]
 80002a4:	3210      	adds	r2, #16
 80002a6:	2101      	movs	r1, #1
 80002a8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ac:	431a      	orrs	r2, r3
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	601a      	str	r2, [r3, #0]
}
 80002b2:	bf00      	nop
 80002b4:	3714      	adds	r7, #20
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40020c18 	.word	0x40020c18

080002c4 <ButtonState>:

char ButtonState()
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
	uint32_t* GPIOA_IDR = (uint32_t*)(GPIOA_BASE_ADDR + 0x10);
 80002ca:	4b07      	ldr	r3, [pc, #28]	@ (80002e8 <ButtonState+0x24>)
 80002cc:	607b      	str	r3, [r7, #4]
	return (*GPIOA_IDR >> 0) & 1;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	f003 0301 	and.w	r3, r3, #1
 80002d8:	b2db      	uxtb	r3, r3
}
 80002da:	4618      	mov	r0, r3
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40020010 	.word	0x40020010

080002ec <function>:

void function()
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	if(ButtonState())
 80002f0:	f7ff ffe8 	bl	80002c4 <ButtonState>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d004      	beq.n	8000304 <function+0x18>
		LedCtrl(LED_RED, 1);
 80002fa:	2101      	movs	r1, #1
 80002fc:	200e      	movs	r0, #14
 80002fe:	f7ff ffb9 	bl	8000274 <LedCtrl>
	else
		LedCtrl(LED_RED, 0);
}
 8000302:	e003      	b.n	800030c <function+0x20>
		LedCtrl(LED_RED, 0);
 8000304:	2100      	movs	r1, #0
 8000306:	200e      	movs	r0, #14
 8000308:	f7ff ffb4 	bl	8000274 <LedCtrl>
}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}

08000310 <EXTI0Init>:

#define EXTI_BASE_ADDR	0x40013C00

void EXTI0Init()
{
 8000310:	b480      	push	{r7}
 8000312:	b08b      	sub	sp, #44	@ 0x2c
 8000314:	af00      	add	r7, sp, #0
			+ set trong thanh ghi EXTI_IMR
	- ARM (NVIC) phải chấp nhận interrupt signal từ EXTI gửi lên?
		+ bước 1: xác định EXTI0 nằm ở position bao nhiêu trong vector table? (mở vector table ở chapter "10: interrupts and events" trong reference manual) --> 6
		+ bước 2: enable interrupt cho position 6
	*/
	uint32_t* EXTI_RTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x08);
 8000316:	4b24      	ldr	r3, [pc, #144]	@ (80003a8 <EXTI0Init+0x98>)
 8000318:	623b      	str	r3, [r7, #32]
	*EXTI_RTSR |= (1<<0);
 800031a:	6a3b      	ldr	r3, [r7, #32]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f043 0201 	orr.w	r2, r3, #1
 8000322:	6a3b      	ldr	r3, [r7, #32]
 8000324:	601a      	str	r2, [r3, #0]
	uint32_t* EXTI_FTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x0C);
 8000326:	4b21      	ldr	r3, [pc, #132]	@ (80003ac <EXTI0Init+0x9c>)
 8000328:	61fb      	str	r3, [r7, #28]
	*EXTI_FTSR |= (1<<0);
 800032a:	69fb      	ldr	r3, [r7, #28]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f043 0201 	orr.w	r2, r3, #1
 8000332:	69fb      	ldr	r3, [r7, #28]
 8000334:	601a      	str	r2, [r3, #0]
	uint32_t* EXTI_IMR = (uint32_t*)(EXTI_BASE_ADDR + 0x00);
 8000336:	4b1e      	ldr	r3, [pc, #120]	@ (80003b0 <EXTI0Init+0xa0>)
 8000338:	61bb      	str	r3, [r7, #24]
	*EXTI_IMR |= (1<<0);
 800033a:	69bb      	ldr	r3, [r7, #24]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f043 0201 	orr.w	r2, r3, #1
 8000342:	69bb      	ldr	r3, [r7, #24]
 8000344:	601a      	str	r2, [r3, #0]

	uint32_t* NVIC_ISER0 = (uint32_t*)0xE000E100;
 8000346:	4b1b      	ldr	r3, [pc, #108]	@ (80003b4 <EXTI0Init+0xa4>)
 8000348:	617b      	str	r3, [r7, #20]
	*NVIC_ISER0 |= 1<<6;
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000352:	697b      	ldr	r3, [r7, #20]
 8000354:	601a      	str	r2, [r3, #0]




	//Move vector table to RAM (0x20000000)
	uint8_t* src = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	613b      	str	r3, [r7, #16]
	uint8_t* dis = 0x20000000;
 800035a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800035e:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 0x198; i ++){ //0->0x198 is the size of the vector table
 8000360:	2300      	movs	r3, #0
 8000362:	627b      	str	r3, [r7, #36]	@ 0x24
 8000364:	e00a      	b.n	800037c <EXTI0Init+0x6c>
		*(dis + i) = *(src + i);
 8000366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000368:	693a      	ldr	r2, [r7, #16]
 800036a:	441a      	add	r2, r3
 800036c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800036e:	68f9      	ldr	r1, [r7, #12]
 8000370:	440b      	add	r3, r1
 8000372:	7812      	ldrb	r2, [r2, #0]
 8000374:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 0x198; i ++){ //0->0x198 is the size of the vector table
 8000376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000378:	3301      	adds	r3, #1
 800037a:	627b      	str	r3, [r7, #36]	@ 0x24
 800037c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800037e:	f5b3 7fcc 	cmp.w	r3, #408	@ 0x198
 8000382:	dbf0      	blt.n	8000366 <EXTI0Init+0x56>
	}

	//Telling ARM that the vector table was moved
	uint32_t* VTOR = (uint32_t*) 0XE000ED08;
 8000384:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <EXTI0Init+0xa8>)
 8000386:	60bb      	str	r3, [r7, #8]
	*VTOR = 0x20000000;
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800038e:	601a      	str	r2, [r3, #0]

	int *ptr;
	ptr = 0x58;
 8000390:	2358      	movs	r3, #88	@ 0x58
 8000392:	607b      	str	r3, [r7, #4]
	*ptr = function;
 8000394:	4a09      	ldr	r2, [pc, #36]	@ (80003bc <EXTI0Init+0xac>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	601a      	str	r2, [r3, #0]
}
 800039a:	bf00      	nop
 800039c:	372c      	adds	r7, #44	@ 0x2c
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	40013c08 	.word	0x40013c08
 80003ac:	40013c0c 	.word	0x40013c0c
 80003b0:	40013c00 	.word	0x40013c00
 80003b4:	e000e100 	.word	0xe000e100
 80003b8:	e000ed08 	.word	0xe000ed08
 80003bc:	080002ed 	.word	0x080002ed

080003c0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
	if(ButtonState())
 80003c6:	f7ff ff7d 	bl	80002c4 <ButtonState>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d004      	beq.n	80003da <EXTI0_IRQHandler+0x1a>
		LedCtrl(LED_RED, 1);
 80003d0:	2101      	movs	r1, #1
 80003d2:	200e      	movs	r0, #14
 80003d4:	f7ff ff4e 	bl	8000274 <LedCtrl>
 80003d8:	e003      	b.n	80003e2 <EXTI0_IRQHandler+0x22>
	else
		LedCtrl(LED_RED, 0);
 80003da:	2100      	movs	r1, #0
 80003dc:	200e      	movs	r0, #14
 80003de:	f7ff ff49 	bl	8000274 <LedCtrl>

	//clear interrupt flag
	uint32_t* EXTI_PR = (uint32_t*)(EXTI_BASE_ADDR + 0x14);
 80003e2:	4b06      	ldr	r3, [pc, #24]	@ (80003fc <EXTI0_IRQHandler+0x3c>)
 80003e4:	607b      	str	r3, [r7, #4]
	*EXTI_PR |= (1<<0);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f043 0201 	orr.w	r2, r3, #1
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	601a      	str	r2, [r3, #0]
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40013c14 	.word	0x40013c14

08000400 <main>:

int main()
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	HAL_Init();
 8000404:	f000 f8ac 	bl	8000560 <HAL_Init>
	LedInit();
 8000408:	f7ff fee6 	bl	80001d8 <LedInit>
	ButtonInit();
 800040c:	f7ff ff0e 	bl	800022c <ButtonInit>
	EXTI0Init();
 8000410:	f7ff ff7e 	bl	8000310 <EXTI0Init>

	while(1)
	{
		LedCtrl(LED_GREEN, 1);
 8000414:	2101      	movs	r1, #1
 8000416:	200c      	movs	r0, #12
 8000418:	f7ff ff2c 	bl	8000274 <LedCtrl>
		HAL_Delay(1000);
 800041c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000420:	f000 f910 	bl	8000644 <HAL_Delay>
		LedCtrl(LED_GREEN, 0);
 8000424:	2100      	movs	r1, #0
 8000426:	200c      	movs	r0, #12
 8000428:	f7ff ff24 	bl	8000274 <LedCtrl>
		HAL_Delay(1000);
 800042c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000430:	f000 f908 	bl	8000644 <HAL_Delay>
		LedCtrl(LED_GREEN, 1);
 8000434:	bf00      	nop
 8000436:	e7ed      	b.n	8000414 <main+0x14>

08000438 <HAL_MspInit>:
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	2300      	movs	r3, #0
 8000440:	607b      	str	r3, [r7, #4]
 8000442:	4b10      	ldr	r3, [pc, #64]	@ (8000484 <HAL_MspInit+0x4c>)
 8000444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000446:	4a0f      	ldr	r2, [pc, #60]	@ (8000484 <HAL_MspInit+0x4c>)
 8000448:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800044c:	6453      	str	r3, [r2, #68]	@ 0x44
 800044e:	4b0d      	ldr	r3, [pc, #52]	@ (8000484 <HAL_MspInit+0x4c>)
 8000450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2300      	movs	r3, #0
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <HAL_MspInit+0x4c>)
 8000460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000462:	4a08      	ldr	r2, [pc, #32]	@ (8000484 <HAL_MspInit+0x4c>)
 8000464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000468:	6413      	str	r3, [r2, #64]	@ 0x40
 800046a:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <HAL_MspInit+0x4c>)
 800046c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800046e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40023800 	.word	0x40023800

08000488 <NMI_Handler>:
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <NMI_Handler+0x4>

08000490 <HardFault_Handler>:
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <HardFault_Handler+0x4>

08000498 <MemManage_Handler>:
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <MemManage_Handler+0x4>

080004a0 <BusFault_Handler>:
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <BusFault_Handler+0x4>

080004a8 <UsageFault_Handler>:
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <UsageFault_Handler+0x4>

080004b0 <SVC_Handler>:
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <DebugMon_Handler>:
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	bf00      	nop
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <PendSV_Handler>:
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr

080004da <SysTick_Handler>:
 80004da:	b580      	push	{r7, lr}
 80004dc:	af00      	add	r7, sp, #0
 80004de:	f000 f891 	bl	8000604 <HAL_IncTick>
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <SystemInit>:
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <SystemInit+0x20>)
 80004ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004f2:	4a05      	ldr	r2, [pc, #20]	@ (8000508 <SystemInit+0x20>)
 80004f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	e000ed00 	.word	0xe000ed00

0800050c <Reset_Handler>:
 800050c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000544 <LoopFillZerobss+0xe>
 8000510:	f7ff ffea 	bl	80004e8 <SystemInit>
 8000514:	480c      	ldr	r0, [pc, #48]	@ (8000548 <LoopFillZerobss+0x12>)
 8000516:	490d      	ldr	r1, [pc, #52]	@ (800054c <LoopFillZerobss+0x16>)
 8000518:	4a0d      	ldr	r2, [pc, #52]	@ (8000550 <LoopFillZerobss+0x1a>)
 800051a:	2300      	movs	r3, #0
 800051c:	e002      	b.n	8000524 <LoopCopyDataInit>

0800051e <CopyDataInit>:
 800051e:	58d4      	ldr	r4, [r2, r3]
 8000520:	50c4      	str	r4, [r0, r3]
 8000522:	3304      	adds	r3, #4

08000524 <LoopCopyDataInit>:
 8000524:	18c4      	adds	r4, r0, r3
 8000526:	428c      	cmp	r4, r1
 8000528:	d3f9      	bcc.n	800051e <CopyDataInit>
 800052a:	4a0a      	ldr	r2, [pc, #40]	@ (8000554 <LoopFillZerobss+0x1e>)
 800052c:	4c0a      	ldr	r4, [pc, #40]	@ (8000558 <LoopFillZerobss+0x22>)
 800052e:	2300      	movs	r3, #0
 8000530:	e001      	b.n	8000536 <LoopFillZerobss>

08000532 <FillZerobss>:
 8000532:	6013      	str	r3, [r2, #0]
 8000534:	3204      	adds	r2, #4

08000536 <LoopFillZerobss>:
 8000536:	42a2      	cmp	r2, r4
 8000538:	d3fb      	bcc.n	8000532 <FillZerobss>
 800053a:	f000 f98d 	bl	8000858 <__libc_init_array>
 800053e:	f7ff ff5f 	bl	8000400 <main>
 8000542:	4770      	bx	lr
 8000544:	20020000 	.word	0x20020000
 8000548:	20000000 	.word	0x20000000
 800054c:	2000000c 	.word	0x2000000c
 8000550:	080008c0 	.word	0x080008c0
 8000554:	2000000c 	.word	0x2000000c
 8000558:	2000002c 	.word	0x2000002c

0800055c <ADC_IRQHandler>:
 800055c:	e7fe      	b.n	800055c <ADC_IRQHandler>
	...

08000560 <HAL_Init>:
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
 8000564:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <HAL_Init+0x40>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a0d      	ldr	r2, [pc, #52]	@ (80005a0 <HAL_Init+0x40>)
 800056a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b0b      	ldr	r3, [pc, #44]	@ (80005a0 <HAL_Init+0x40>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a0a      	ldr	r2, [pc, #40]	@ (80005a0 <HAL_Init+0x40>)
 8000576:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b08      	ldr	r3, [pc, #32]	@ (80005a0 <HAL_Init+0x40>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a07      	ldr	r2, [pc, #28]	@ (80005a0 <HAL_Init+0x40>)
 8000582:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	2003      	movs	r0, #3
 800058a:	f000 f931 	bl	80007f0 <HAL_NVIC_SetPriorityGrouping>
 800058e:	200f      	movs	r0, #15
 8000590:	f000 f808 	bl	80005a4 <HAL_InitTick>
 8000594:	f7ff ff50 	bl	8000438 <HAL_MspInit>
 8000598:	2300      	movs	r3, #0
 800059a:	4618      	mov	r0, r3
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40023c00 	.word	0x40023c00

080005a4 <HAL_InitTick>:
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	4b12      	ldr	r3, [pc, #72]	@ (80005f8 <HAL_InitTick+0x54>)
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <HAL_InitTick+0x58>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4619      	mov	r1, r3
 80005b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80005be:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f93b 	bl	800083e <HAL_SYSTICK_Config>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <HAL_InitTick+0x2e>
 80005ce:	2301      	movs	r3, #1
 80005d0:	e00e      	b.n	80005f0 <HAL_InitTick+0x4c>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b0f      	cmp	r3, #15
 80005d6:	d80a      	bhi.n	80005ee <HAL_InitTick+0x4a>
 80005d8:	2200      	movs	r2, #0
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	f04f 30ff 	mov.w	r0, #4294967295
 80005e0:	f000 f911 	bl	8000806 <HAL_NVIC_SetPriority>
 80005e4:	4a06      	ldr	r2, [pc, #24]	@ (8000600 <HAL_InitTick+0x5c>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6013      	str	r3, [r2, #0]
 80005ea:	2300      	movs	r3, #0
 80005ec:	e000      	b.n	80005f0 <HAL_InitTick+0x4c>
 80005ee:	2301      	movs	r3, #1
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000000 	.word	0x20000000
 80005fc:	20000008 	.word	0x20000008
 8000600:	20000004 	.word	0x20000004

08000604 <HAL_IncTick>:
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <HAL_IncTick+0x20>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <HAL_IncTick+0x24>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4413      	add	r3, r2
 8000614:	4a04      	ldr	r2, [pc, #16]	@ (8000628 <HAL_IncTick+0x24>)
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000008 	.word	0x20000008
 8000628:	20000028 	.word	0x20000028

0800062c <HAL_GetTick>:
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
 8000630:	4b03      	ldr	r3, [pc, #12]	@ (8000640 <HAL_GetTick+0x14>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000028 	.word	0x20000028

08000644 <HAL_Delay>:
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	f7ff ffee 	bl	800062c <HAL_GetTick>
 8000650:	60b8      	str	r0, [r7, #8]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800065c:	d005      	beq.n	800066a <HAL_Delay+0x26>
 800065e:	4b0a      	ldr	r3, [pc, #40]	@ (8000688 <HAL_Delay+0x44>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	461a      	mov	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	4413      	add	r3, r2
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	bf00      	nop
 800066c:	f7ff ffde 	bl	800062c <HAL_GetTick>
 8000670:	4602      	mov	r2, r0
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	429a      	cmp	r2, r3
 800067a:	d8f7      	bhi.n	800066c <HAL_Delay+0x28>
 800067c:	bf00      	nop
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000008 	.word	0x20000008

0800068c <__NVIC_SetPriorityGrouping>:
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f003 0307 	and.w	r3, r3, #7
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <__NVIC_SetPriorityGrouping+0x44>)
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006a8:	4013      	ands	r3, r2
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	021a      	lsls	r2, r3, #8
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4a04      	ldr	r2, [pc, #16]	@ (80006d0 <__NVIC_SetPriorityGrouping+0x44>)
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	60d3      	str	r3, [r2, #12]
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <__NVIC_GetPriorityGrouping>:
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	4b04      	ldr	r3, [pc, #16]	@ (80006ec <__NVIC_GetPriorityGrouping+0x18>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	0a1b      	lsrs	r3, r3, #8
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	4618      	mov	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_SetPriority>:
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	6039      	str	r1, [r7, #0]
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	db0a      	blt.n	800071a <__NVIC_SetPriority+0x2a>
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	b2da      	uxtb	r2, r3
 8000708:	490c      	ldr	r1, [pc, #48]	@ (800073c <__NVIC_SetPriority+0x4c>)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	0112      	lsls	r2, r2, #4
 8000710:	b2d2      	uxtb	r2, r2
 8000712:	440b      	add	r3, r1
 8000714:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8000718:	e00a      	b.n	8000730 <__NVIC_SetPriority+0x40>
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4908      	ldr	r1, [pc, #32]	@ (8000740 <__NVIC_SetPriority+0x50>)
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	f003 030f 	and.w	r3, r3, #15
 8000726:	3b04      	subs	r3, #4
 8000728:	0112      	lsls	r2, r2, #4
 800072a:	b2d2      	uxtb	r2, r2
 800072c:	440b      	add	r3, r1
 800072e:	761a      	strb	r2, [r3, #24]
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000e100 	.word	0xe000e100
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <NVIC_EncodePriority>:
 8000744:	b480      	push	{r7}
 8000746:	b089      	sub	sp, #36	@ 0x24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	61fb      	str	r3, [r7, #28]
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	f1c3 0307 	rsb	r3, r3, #7
 800075e:	2b04      	cmp	r3, #4
 8000760:	bf28      	it	cs
 8000762:	2304      	movcs	r3, #4
 8000764:	61bb      	str	r3, [r7, #24]
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3304      	adds	r3, #4
 800076a:	2b06      	cmp	r3, #6
 800076c:	d902      	bls.n	8000774 <NVIC_EncodePriority+0x30>
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3b03      	subs	r3, #3
 8000772:	e000      	b.n	8000776 <NVIC_EncodePriority+0x32>
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	f04f 32ff 	mov.w	r2, #4294967295
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	fa02 f303 	lsl.w	r3, r2, r3
 8000782:	43da      	mvns	r2, r3
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	401a      	ands	r2, r3
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	409a      	lsls	r2, r3
 800078c:	f04f 31ff 	mov.w	r1, #4294967295
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	fa01 f303 	lsl.w	r3, r1, r3
 8000796:	43d9      	mvns	r1, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	400b      	ands	r3, r1
 800079c:	4313      	orrs	r3, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	3724      	adds	r7, #36	@ 0x24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
	...

080007ac <SysTick_Config>:
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007bc:	d301      	bcc.n	80007c2 <SysTick_Config+0x16>
 80007be:	2301      	movs	r3, #1
 80007c0:	e00f      	b.n	80007e2 <SysTick_Config+0x36>
 80007c2:	4a0a      	ldr	r2, [pc, #40]	@ (80007ec <SysTick_Config+0x40>)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	6053      	str	r3, [r2, #4]
 80007ca:	210f      	movs	r1, #15
 80007cc:	f04f 30ff 	mov.w	r0, #4294967295
 80007d0:	f7ff ff8e 	bl	80006f0 <__NVIC_SetPriority>
 80007d4:	4b05      	ldr	r3, [pc, #20]	@ (80007ec <SysTick_Config+0x40>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	4b04      	ldr	r3, [pc, #16]	@ (80007ec <SysTick_Config+0x40>)
 80007dc:	2207      	movs	r2, #7
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	2300      	movs	r3, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	e000e010 	.word	0xe000e010

080007f0 <HAL_NVIC_SetPriorityGrouping>:
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ff47 	bl	800068c <__NVIC_SetPriorityGrouping>
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_NVIC_SetPriority>:
 8000806:	b580      	push	{r7, lr}
 8000808:	b086      	sub	sp, #24
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	60b9      	str	r1, [r7, #8]
 8000810:	607a      	str	r2, [r7, #4]
 8000812:	73fb      	strb	r3, [r7, #15]
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	f7ff ff5c 	bl	80006d4 <__NVIC_GetPriorityGrouping>
 800081c:	6178      	str	r0, [r7, #20]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	68b9      	ldr	r1, [r7, #8]
 8000822:	6978      	ldr	r0, [r7, #20]
 8000824:	f7ff ff8e 	bl	8000744 <NVIC_EncodePriority>
 8000828:	4602      	mov	r2, r0
 800082a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082e:	4611      	mov	r1, r2
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff5d 	bl	80006f0 <__NVIC_SetPriority>
 8000836:	bf00      	nop
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_SYSTICK_Config>:
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff ffb0 	bl	80007ac <SysTick_Config>
 800084c:	4603      	mov	r3, r0
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <__libc_init_array>:
 8000858:	b570      	push	{r4, r5, r6, lr}
 800085a:	4d0d      	ldr	r5, [pc, #52]	@ (8000890 <__libc_init_array+0x38>)
 800085c:	4c0d      	ldr	r4, [pc, #52]	@ (8000894 <__libc_init_array+0x3c>)
 800085e:	1b64      	subs	r4, r4, r5
 8000860:	10a4      	asrs	r4, r4, #2
 8000862:	2600      	movs	r6, #0
 8000864:	42a6      	cmp	r6, r4
 8000866:	d109      	bne.n	800087c <__libc_init_array+0x24>
 8000868:	4d0b      	ldr	r5, [pc, #44]	@ (8000898 <__libc_init_array+0x40>)
 800086a:	4c0c      	ldr	r4, [pc, #48]	@ (800089c <__libc_init_array+0x44>)
 800086c:	f000 f818 	bl	80008a0 <_init>
 8000870:	1b64      	subs	r4, r4, r5
 8000872:	10a4      	asrs	r4, r4, #2
 8000874:	2600      	movs	r6, #0
 8000876:	42a6      	cmp	r6, r4
 8000878:	d105      	bne.n	8000886 <__libc_init_array+0x2e>
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000880:	4798      	blx	r3
 8000882:	3601      	adds	r6, #1
 8000884:	e7ee      	b.n	8000864 <__libc_init_array+0xc>
 8000886:	f855 3b04 	ldr.w	r3, [r5], #4
 800088a:	4798      	blx	r3
 800088c:	3601      	adds	r6, #1
 800088e:	e7f2      	b.n	8000876 <__libc_init_array+0x1e>
 8000890:	080008b8 	.word	0x080008b8
 8000894:	080008b8 	.word	0x080008b8
 8000898:	080008b8 	.word	0x080008b8
 800089c:	080008bc 	.word	0x080008bc

080008a0 <_init>:
 80008a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008a2:	bf00      	nop
 80008a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008a6:	bc08      	pop	{r3}
 80008a8:	469e      	mov	lr, r3
 80008aa:	4770      	bx	lr

080008ac <_fini>:
 80008ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ae:	bf00      	nop
 80008b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008b2:	bc08      	pop	{r3}
 80008b4:	469e      	mov	lr, r3
 80008b6:	4770      	bx	lr
